@import url('https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;400;500;700&display=swap');

*{
    margin: 0;
    padding: 0;
    box-sizing:border-box;
    list-style: none;
    text-decoration: none;
    font-family: 'Ubuntu', sans-serif;
}

img{
    width: 100%;
}

body{
    background-color: #f9f9f9;
    font-size: 18px;
}

/*-- Dentro de body uso solo un div para generar la grilla, no lo hago en body que es una etiqueta muy general que voy a tener en todos los html--*/
.grid{
    display: grid;
    /*-- Las etiquetas a las que le doy el nombre de area tienen que ser hijos directo de este grid.
    Osea, tienen que estar justo adentro del div class="grid", no dentor de otra etiqueta--*/
    grid-template-areas: 
    "header header header"
    "banner banner banner"
    "uno    dos     tres"
    "cinco  dos     tres"
    "cinco  cuatro  cuatro"
    "footer footer footer"
    ;
    grid-template-columns: 1fr 50vw 20vw;
/* las medidas van en orden de como están declaradas en "grid-template-areas" y se van a aplicar asi:border:
20vh afecta a la primera fila de  "header header header"
80vh afecta a la segunda  "banner banner banner"
la tercera el repeat hace que tengan la misma medida las 2 filas siguientes
la de "uno dos tres" y "uno cuatro cuatro"
la ultima de 100px afecta al footer */    
    grid-template-rows: 20vh 80vh repeat(3, 200px) 10rem;
    gap: 2vw;
}

.header{
    /*-- le doy el nombre que use en el grid template area para que funcione--*/
    grid-area: header;
    /*-- dentro de un grid puedo usar otro, acá lo uso para acomodar la navegación --*/
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: repeat(2, minmax(50px, 1fr));

}
/* En vez de usar areas, en la caja de header armo una grilla de 12 columnas y dos filas
después a cada hijo le digo cuanto espacio debe ocupar de esa grilla
como pintar celdas de un excel o pixelart (dibujos de pixeles)*/
.header--logo{
    background-color: #325354;
/*Le digo que ocupe desde el inicio de la columna 1 hasta el inicio de la columna 4*/
    grid-column: 1/4;
/*Acá le digo que ocupe desde el inicio de fila 1 hasta inicio de fila 3
por qué le digo fila 3 si solo hay 2?
para que ocupe hasta el final esa fila 2 (donde sería el inicio de la 3)
    */
    grid-row: 1/3;
    height: 100%;
    object-fit: contain;
}

.header--logo img{
    height: 100%;
    object-fit: contain;
}

.header--tagline{
    background-color: #5f9ea083;
    grid-column: 4/13;
    /*decirle solo el numero de fila es lo mismo que decirle que ocupe toda la fila 1*/
    grid-row: 1;

    /*ahora aplico flex para centrar el texto,
    no uso place- de grid porque quiero que el fondo ocupe toooda la caja*/
    display: flex;
    justify-content: center;
    align-items: center;
}
.header--nav{
    grid-column: 4/13;
    /* es lo mismo que decirle que ocupe 2/3
    */
    grid-row: 2;
    /*puedo usar*/
    place-self: center;
}

.header a{
    font-weight: 700;
    color: #5f9ea0;
}

/* -- Le doy display flex a la lista para los items se acomoden uno al lado del otro
Si quiero aplicar propiedades de flex (justify, etc.), necesita tener espacio al rededor, y no lo tiene (se puede chequear desde el inspector)
Puedo darle tamaño a la etiqueta nav, o a los <li> para que se separen, cualquier opción es valida */
.navigation{
    display: flex;
}

.navigation li{
    padding: 0 2rem;
}

.banner{
    /*-- Nombre que use en el grid area--*/
    grid-area: banner;
    background-image: url(../img/banner.jpeg);
    background-size: cover;
    background-position-y: top;
}
.banner--text{
    height: 100%;
    background-color: rgba(95, 158, 160, 0.341);
    display: flex;
    justify-content: center;
    align-items: center;
}
.banner--text__titulo{
    font-size: calc(1em + 5vw);
    font-weight: 700;
    color: #f9f9f9;
}

.card{
    background-color: #5f9ea0;
    color: #f9f9f9;
    border-radius: 20px;
    position: relative;
    overflow: hidden;
    transition: ease-in-out .5s;
}

.card img{
    height: 100%;
    width: 100%;
    opacity: 0.5;
    filter: grayscale(1);
    object-fit: cover;
    transition: ease-in-out .5s;
}

.card h3{
    position: absolute;
    opacity: 0;
    z-index: 10;
    bottom: 0;
    left: 0;
    font-size: calc(0.5em + 3vw);
    background-color: #325354;
    border-top-right-radius: 50px ;
    padding: 1rem;
    transition: ease-in-out .5s;

}

.card:hover img{
    transform: scale(1.1);
    filter: grayscale(0);
    opacity: 1;
}
.card:hover h3{
    opacity: 1;
}
.card:hover{
    background-color: transparent;
}
.uno{
    /*-- Nombre que use en el grid area.
    Para no repetir los estilos de colores en las 4 card, lo separo en dos clases distintas en el html.
    Primero la clase card que le di estilos de texto y colores.
    Aparte una class con el numero que uso en el grid-area. Se puede hacer directamente en una etiqueta sola que se llame card-uno, card-dos, etc.
    --*/
    grid-area: uno;
    font-size: 150%;
    background-color: #325354;
    color: #f9f9f9;
    width: 100%;
    display: flex;
    align-items: center;
    text-align: center;
}

.dos{
    grid-area:dos;

}
.tres{
    grid-area: tres;
}

.cuatro{
    grid-area: cuatro;
}

.cinco{
    grid-area: cinco;
}

footer{
    grid-area: footer;
    background-color: #5f9ea0;
    color: #f9f9f9;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2rem;
    font-style: italic;
    font-weight: 300;
}

.redes{
    display: flex;
    width: 50%;
    justify-content: space-around;
}

.redes i{
    color: #f9f9f9;
}

@media screen and (max-width: 720px) {

    /*para cambiar el orden de los elementos en algun breakpoint
    solo necesito volver a escribir las clases y cambiar los numeros de
    grid-column y grid-row
    no necesito volver a escribir clases que sigo necesitando y están declaras por fuera de los breakpoint
    porque esos estilos se siguen aplicando, no tienen condicion*/
    .header--logo{
        grid-column: 1/4;
        grid-row: 1;
    }
    .header--tagline{
        grid-column: 4/13;
        grid-row: 1;
    }
    .header--nav{
        grid-column: 1/13;
        grid-row: 2;
    }

    .grid{
        grid-template-columns: 50vw 1fr;
        grid-template-areas: 
        "header header "
        "banner banner"
        "uno dos"
        "cinco tres"
        "cinco cuatro"
        "footer footer"
        ;
    }

    .card h3{
        opacity: 1;
    }
    footer{
        background-color: rgb(93, 164, 214);
        flex-direction: column;
    }
    
    .redes{
        width: 90%;
    }
}

@media screen and (min-width: 1200px){
    .grid{
        grid-template-columns: 20vw 50vw 1fr;
        grid-template-areas: 
        "header header header"
        "banner banner banner"
        "uno dos tres"
        "cinco dos tres"
        "cinco cuatro tres"
        "footer footer footer"
        ;
    }
    
    footer{
        background-color: rgb(83, 135, 172);
    }

}